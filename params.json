{
  "name": "Mktrojanhorse",
  "tagline": "This will make a linux machine into a Trojan Horse, and by that I mean we'll add a line to rc.local that starts autossh to create a reverse tunnel",
  "body": "# mkTrojanHorse\r\n\r\nThis will make a linux machine into a Trojan Horse, \r\nand by that I mean we'll add a line to rc.local \r\nthat starts autossh to create a reverse tunnel\r\nThis enables you to connect back to this machine no matter where it pops \r\nup on the internet at large, despite its many nefarious uses, this is my preferred method\r\nfor accessing a raspberryPi remotely when you put it up behind a consumer internet connection\r\ni.e. dynamic IP address and NAT firewall\r\nI, also, put this sort of thing on my mom's computer so that I can update her machine or give \r\nher other tech support from afar.\r\n\r\n### Usage\r\n\r\nFirst put up a ssh host that both you and the raspberryPi are keyed for, log in from both to ensure it is added to known_hosts etc\r\n\r\nThen just just use the default recipe\r\n\r\n```\r\nmake trojan\r\n```\r\n\r\nyou will be prompted for everything else.\r\n\r\n##### ~/.ssh/config additions\r\n\r\nI put this in my `~/.ssh/config`\r\n\r\n```\r\nHost remotePi\r\n  User root\r\n  ForwardAgent yes\r\n  Hostname 127.0.0.1\r\n  Port 12345\r\n  ProxyCommand ssh -q -W  %h:%p -p2222 root@remotessh.example.com\r\n```\r\n\r\nNow you can login to pi like this `ssh remotePi`\r\n\r\n### NSFW\r\n\r\nThis is Not Safe For Work, it is very appropriate in certain situation and can be used without punity,\r\nbut make sure both management and the heads of IT understand and give you permission for this one\r\nBEFORE you implement this.\r\n\r\nMy intended use is to be able to log into a remote raspberryPi and pull down updated code, reconfigure things, etc.\r\nThis can also be used to break into corporate firewalls so you can chat like you are at work after you've gone home\r\nand other nasty uses, so it's best to be very clear about usage with the owners of any network before implementing this.\r\n\r\nThat being said, it is also really hard to detect and prove, as you cannot distinguish this connection\r\nfrom another outbound ssh connection to the same machine that does not have the reverse tunnel inside of it.\r\n\r\nHowever, if someone has access to the internal machine a quick `ps aux|grep ssh` will show something like this:\r\n\r\n```\r\n root       283  0.0  0.1   1724  1192 ?        Ss   13:46   0:00 /usr/lib/autossh/autossh -M 66666 -N    -o PubkeyAuthentication=yes -o PasswordAuthentication=no -i /root/.ssh/id_ecdsa -R \r\n```\r\n\r\nThere are many other ways your own machine can rat you out. \r\n\r\nYou've been warned, use this on machines and networks that you are the owner/administrator of only to be safe.\r\n\r\nFor example, the opposite seems totally appropriate to me, \r\ni.e. not to access work computers from home, but rather to access home computers from work.\r\ne.g. if you were to access a raspberryPi on your home network\r\nfrom behind a dynamic IP + NAT firewall using this method from your work computer. Say to mount your music collection\r\nvia sshfs.  But again, if in doubt talk to your management.\r\n\r\n### OctoSSH\r\n\r\nI leave [this](https://github.com/joshuacox/octossh) docker container up on a static IP, and that is my remote jump box\r\nit usually runs on a nonstandard port (i.e. like 2222), \r\n\r\n```\r\ndocker run -it -e -p22:2222 KEY_URL=https://raw.githubusercontent.com/WebHostingCoopTeam/keys/master/keys joshuacox/octossh\r\n```\r\n\r\nNotice you can fork my 'keys' repo and remove all the keys, or create your own where there is a file 'keys' that contains\r\nvalid ssh keys\r\n\r\nNow when you `make trojan` the remote ssh host information will be for the above jump box\r\n\r\n###### For more related errata:\r\n[joshuacox.github.io](http://joshuacox.github.io/)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}